'use strict';

QUnit.module('Тестируем функцию factorial', () => {
    QUnit.test('Факториал 0 должен быть 1', (assert) => {
        assert.strictEqual(factorial(0), 1, '0! = 1');
    });

    QUnit.test('Факториал 1 должен быть 1', (assert) => {
        assert.strictEqual(factorial(1), 1, '1! = 1');
    });

    QUnit.test('Факториал 5 должен быть 120', (assert) => {
        assert.strictEqual(factorial(5), 120, '5! = 120');
    });

    QUnit.test('Факториал 15 должен быть 1 307 674 368 000', (assert) => {
        assert.strictEqual(factorial(15), 1_307_674_368_000, '15! = 1 307 674 368 000');
    });

    QUnit.test('Факториал для отрицательного числа должен выбрасывать ошибку', (assert) => {
        assert.throws(() => {
            factorial(-1);
        }, /Факториал определен только для целых неотрицательных чисел/, 'Ошибка выбрасывается для -1');
    });

    QUnit.test('Факториал для дробного числа должен выбрасывать ошибку', (assert) => {
        assert.throws(() => {
            factorial(2.5);
        }, /Факториал определен только для целых неотрицательных чисел/, 'Ошибка выбрасывается для 2.5');
    });

    QUnit.test('Факториал для строки должен выбрасывать ошибку', (assert) => {
        assert.throws(() => {
            factorial("hello");
        }, /Факториал определен только для целых неотрицательных чисел/, 'Ошибка выбрасывается для hello');
    });

    QUnit.test('Факториал для undefined должен выбрасывать ошибку', (assert) => {
        assert.throws(() => {
            factorial(undefined);
        }, /Факториал определен только для целых неотрицательных чисел/, 'Ошибка выбрасывается для undefined');
    });

    QUnit.test('Факториал для null должен выбрасывать ошибку', (assert) => {
        assert.throws(() => {
            factorial(null);
        }, /Факториал определен только для целых неотрицательных чисел/, 'Ошибка выбрасывается для null');
    });

    QUnit.test('Функция должна возвращать число при корректном входном параметре', (assert) => {
        assert.strictEqual(typeof factorial(5), 'number', 'Функция возвращает число');
    });
});
