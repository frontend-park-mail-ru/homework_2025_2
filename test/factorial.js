'use strict';

QUnit.module('Тестируем функцию factorial', () => {

    QUnit.test('Факториал 0 должен быть 1', (assert) => {
        assert.strictEqual(factorial(0), 1, '0! = 1');
    });

    QUnit.test('Факториал 1 должен быть 1', (assert) => {
        assert.strictEqual(factorial(1), 1, '1! = 1');
    });

    QUnit.test('Факториал 5 должен быть 120', (assert) => {
        assert.strictEqual(factorial(5), 120, '5! = 120');
    });

    QUnit.test('Факториал 18 должен быть 6402373705728000', (assert) => {
        assert.strictEqual(factorial(18), 6402373705728000, '18! = 6402373705728000');
    });

    QUnit.test('Факториал для отрицательного числа должен выбрасывать ошибку', (assert) => {
        assert.throws(() => {
            factorial(-1);
        }, /Факториал определен только для целых неотрицательных чисел/, 'Ошибка выбрасывается для -1');
    });

    QUnit.test('Факториал для дробного числа должен выбрасывать ошибку', (assert) => {
        assert.throws(() => {
            factorial(18.7);
        }, /Факториал определен только для целых неотрицательных чисел/, 'Ошибка выбрасывается для 18.7');
    });

    QUnit.test('Факториал для строки должен выбрасывать ошибку', (assert) => {
        assert.throws(() => {
            factorial('string');
        }, /Факториал определен только для целых неотрицательных чисел/, 'Ошибка выбрасывается для строки "string"');
    });

    QUnit.test('Факториал для undefined должен выбрасывать ошибку', (assert) => {
        assert.throws(() => {
            factorial(undefined);
        }, /Факториал определен только для целых неотрицательных чисел/, 'Ошибка выбрасывается для undefined');
    });

    QUnit.test('Факториал для null должен выбрасывать ошибку', (assert) => {
        assert.throws(() => {
            factorial(null);
        }, /Факториал определен только для целых неотрицательных чисел/, 'Ошибка выбрасывается для null');
    });
});

