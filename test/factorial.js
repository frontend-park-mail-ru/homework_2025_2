'use strict';

QUnit.module('Тестируем функцию factorial', () => {
    QUnit.test('Факториал 0 должен быть 1', (assert) => {
        assert.strictEqual(factorial(0), 1, '0! = 1');
    });

    QUnit.test('Факториал 5 должен быть 120', (assert) => {
        assert.strictEqual(factorial(5), 120, '5! = 120');
    });

    QUnit.test('Факториал для отрицательного числа должен выбрасывать ошибку', (assert) => {
        assert.throws(() => {
            factorial(-1);
        }, /Факториал определен только для целых неотрицательных чисел/, 'Ошибка выбрасывается для -1');
    });

    QUnit.test('Факториал для дробного числа должен выбрасывать ошибку', (assert) => {
        assert.throws(() => {
            factorial(2.5);
        }, /Факториал определен только для целых неотрицательных чисел/, 'Ошибка выбрасывается для 2.5');
    });

    QUnit.test('Факториал для строки должен выбрасывать ошибку', (assert) => {
        assert.throws(() => {
            factorial('abc');
        }, /Факториал определен только для целых неотрицательных чисел/, 'Ошибка выбрасывается для abc');
    });

    QUnit.test('Факториал большого числа', (assert) => {
        assert.strictEqual(factorial(20), 2432902008176640000, '20! = 2432902008176640000');
    });
});
